# src/bot.py
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------------------- –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------------------

def read_token_file(path: str = "token.txt") -> str | None:
    """–ß–∏—Ç–∞—î —Ç–æ–∫–µ–Ω –∑ token.txt. –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ñ–æ—Ä–º–∞—Ç KEY=VALUE —ñ –ø—Ä–∏–±–∏—Ä–∞—î –ª–∞–ø–∫–∏."""
    try:
        raw = open(path, "r", encoding="utf-8").read().strip()
    except FileNotFoundError:
        return None
    if "=" in raw:               # —è–∫—â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –∑–∞–ø–∏—Å–∞–ª–∏ TELEGRAM_BOT_TOKEN=...
        raw = raw.split("=", 1)[1].strip()
    return raw.strip('"').strip("'")

load_dotenv()

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=os.getenv("LOG_LEVEL", "INFO"),
)
logger = logging.getLogger(__name__)

BOT_TOKEN = read_token_file() or os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω: token.txt –∞–±–æ TELEGRAM_BOT_TOKEN —É .env")

# ---------------------- —ñ–º–ø–æ—Ä—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ------------------------

# 0) –ü–æ–º–∏–ª–∫–∏ (—è–∫—â–æ —î)
try:
    from src.handlers.errors import error_handler
except Exception:  # –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ
    error_handler = None

# Travel /place (–∑–∞–ª–∏—à–∞—î–º–æ —Ç–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É —Ñ—ñ—á—É, —è–∫—â–æ –º–æ–¥—É–ª—å —ñ—Å–Ω—É—î)
HAS_PLACES = False
try:
    from src.handlers.places import build_handler as build_places
    HAS_PLACES = True
except Exception:
    HAS_PLACES = False

from src.handlers.random_fact import send_random_fact, handle_random_callbacks
from src.handlers.gpt import gpt_command, gpt_on_text
from src.handlers.talk import talk_command, handle_talk_callbacks, talk_on_text
from src.handlers.quiz import quiz_command, handle_quiz_callbacks, quiz_on_text
from src.handlers.translator import (
    translate_command,
    handle_translate_callbacks,
    translate_on_text,
)


# ---------------------- –∫–æ–º–∞–Ω–¥–∏ ------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üåç –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–≤–µ–ª-–±–æ—Ç ‚úàÔ∏è\n\n"
        "–û—Å–Ω–æ–≤–Ω–µ:\n"
        "/place ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç—Ä–µ–≤–µ–ª-“ë–∞–π–¥ (—Ç–≤–æ—è –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)\n\n"
        "–ù–∞–≤—á–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ (–¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è JR):\n"
        "/random ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + –∫–Ω–æ–ø–∫–∏)\n"
        "/gpt ‚Äî –ø–æ—Å—Ç–∞–≤ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ChatGPT\n"
        "/talk ‚Äî –¥—ñ–∞–ª–æ–≥ –∑—ñ ¬´–∑–Ω–∞–º–µ–Ω–∏—Ç—ñ—Å—Ç—é¬ª\n"
        "/quiz ‚Äî –º—ñ–Ω—ñ-–∫–≤—ñ–∑ –∑ —Ä–∞—Ö—É–Ω–∫–æ–º\n"
        "/translate ‚Äî –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á —ñ–∑ –≤–∏–±–æ—Ä–æ–º –º–æ–≤–∏\n"
    )
    await update.message.reply_text(text)

# ---------------------- —Ä–æ—É—Ç–µ—Ä —Ç–µ–∫—Å—Ç—É ------------------------

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£—Å—ñ –ù–ï–∫–æ–º–∞–Ω–¥–Ω—ñ —Ç–µ–∫—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º.
    –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π ‚Äî —Ö—Ç–æ –æ–±—Ä–æ–±–∏–≤, —Ç–æ–π –ø–æ–≤–µ—Ä—Ç–∞—î True –π —ñ–Ω—à—ñ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è.
    """
    if await gpt_on_text(update, context):
        return
    if await talk_on_text(update, context):
        return
    if await quiz_on_text(update, context):
        return
    if await translate_on_text(update, context):
        return
    await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é.")

# ---------------------- –∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É ------------------------

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ü–æ–º–∏–ª–∫–∏
    if error_handler:
        app.add_error_handler(error_handler)

    # /start
    app.add_handler(CommandHandler("start", start))

    # –¢–≤–æ—î /place (—è–∫—â–æ –º–æ–¥—É–ª—å —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å build_handler())
    if HAS_PLACES:
        app.add_handler(build_places())

    # 1) /random + –π–æ–≥–æ –∫–Ω–æ–ø–∫–∏ (random_more, end_start)
    app.add_handler(CommandHandler("random", send_random_fact))
    app.add_handler(CallbackQueryHandler(handle_random_callbacks, pattern=r"^(random_more|end_start)$"))

    # 2) /gpt (—Ä–µ–∂–∏–º —á–∞—Ç—É –∑ GPT)
    app.add_handler(CommandHandler("gpt", gpt_command))

    # 3) /talk + –∫–Ω–æ–ø–∫–∏ (talk_..., end_start)
    app.add_handler(CommandHandler("talk", talk_command))
    app.add_handler(CallbackQueryHandler(handle_talk_callbacks, pattern=r"^(talk_.*|end_start)$"))

    # 4) /quiz + –∫–Ω–æ–ø–∫–∏ (quiz_..., end_start)
    app.add_handler(CommandHandler("quiz", quiz_command))
    app.add_handler(CallbackQueryHandler(handle_quiz_callbacks, pattern=r"^(quiz_.*|end_start)$"))

    # 5) /translate + –∫–Ω–æ–ø–∫–∏ (tr_..., end_start)
    app.add_handler(CommandHandler("translate", translate_command))
    app.add_handler(CallbackQueryHandler(handle_translate_callbacks, pattern=r"^(tr_.*|end_start)$"))

    # –†–æ—É—Ç–µ—Ä –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤ (–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥ —ñ callback'—ñ–≤!)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
